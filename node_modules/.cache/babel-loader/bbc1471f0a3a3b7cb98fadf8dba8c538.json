{"ast":null,"code":"var _jsxFileName = \"/Users/Mustaqeem/MusicApp1/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react'; //class Dashboard extends Component{\n//static contextType = OpenUpContext;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('albums');\n  const {\n    isValidSession,\n    history\n  } = props;\n\n  const handleSearch = searchTerm => {\n    if (isValidSession()) {\n      setIsLoading(true);\n      props.dispatch(initiateGetResult(searchTerm)).then(() => {\n        setIsLoading(false);\n        setSelectedCategory('albums');\n      });\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const loadMore = async type => {\n    if (isValidSession()) {\n      const {\n        dispatch,\n        albums,\n        artists,\n        playlist\n      } = props;\n      setIsLoading(true);\n\n      switch (type) {\n        case 'albums':\n          await dispatch(initiateLoadMoreAlbums(albums.next));\n          break;\n\n        case 'artists':\n          await dispatch(initiateLoadMoreArtists(artists.next));\n          break;\n\n        case 'playlist':\n          await dispatch(initiateLoadMorePlaylist(playlist.next));\n          break;\n\n        default:\n      }\n\n      setIsLoading(false);\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const setCategory = category => {\n    setSelectedCategory(category);\n  };\n\n  const {\n    albums,\n    artists,\n    playlist\n  } = props;\n  const result = {\n    albums,\n    artists,\n    playlist\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: isValidSession() ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        handleSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Loader, {\n        show: isLoading,\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n        result: result,\n        loadMore: loadMore,\n        setCategory: setCategory,\n        selectedCategory: selectedCategory,\n        isValidSession: isValidSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Dashboard, \"SMjZXYIvygyuw6mOjey8On4Ec0I=\");\n\n_c = Dashboard;\n\nconst mapStateToProps = state => {\n  return {\n    albums: state.albums,\n    artists: state.artists,\n    playlist: state.playlist\n  };\n};\n\nexport default connect(mapStateToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/Mustaqeem/MusicApp1/src/components/Dashboard.js"],"names":["React","Component","Dashboard","props","isLoading","setIsLoading","useState","selectedCategory","setSelectedCategory","isValidSession","history","handleSearch","searchTerm","dispatch","initiateGetResult","then","push","pathname","state","session_expired","loadMore","type","albums","artists","playlist","initiateLoadMoreAlbums","next","initiateLoadMoreArtists","initiateLoadMorePlaylist","setCategory","category","result","mapStateToProps","connect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//class Dashboard extends Component{\n    //static contextType = OpenUpContext;\n\n\n    \nconst Dashboard = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [selectedCategory, setSelectedCategory] = useState('albums');\n    const { isValidSession, history } = props;\n  \n    const handleSearch = (searchTerm) => {\n      if (isValidSession()) {\n        setIsLoading(true);\n        props.dispatch(initiateGetResult(searchTerm)).then(() => {\n          setIsLoading(false);\n          setSelectedCategory('albums');\n        });\n      } else {\n        history.push({\n          pathname: '/',\n          state: {\n            session_expired: true\n          }\n        });\n      }\n    };\n  \n    const loadMore = async (type) => {\n      if (isValidSession()) {\n        const { dispatch, albums, artists, playlist } = props;\n        setIsLoading(true);\n        switch (type) {\n          case 'albums':\n            await dispatch(initiateLoadMoreAlbums(albums.next));\n            break;\n          case 'artists':\n            await dispatch(initiateLoadMoreArtists(artists.next));\n            break;\n          case 'playlist':\n            await dispatch(initiateLoadMorePlaylist(playlist.next));\n            break;\n          default:\n        }\n        setIsLoading(false);\n      } else {\n        history.push({\n          pathname: '/',\n          state: {\n            session_expired: true\n          }\n        });\n      }\n    };\n  \n    const setCategory = (category) => {\n      setSelectedCategory(category);\n    };\n  \n    const { albums, artists, playlist } = props;\n    const result = { albums, artists, playlist };\n  \n    return (\n      <React.Fragment>\n        {isValidSession() ? (\n          <div>\n            <Header />\n            <SearchForm handleSearch={handleSearch} />\n            <Loader show={isLoading}>Loading...</Loader>\n            <SearchResult\n              result={result}\n              loadMore={loadMore}\n              setCategory={setCategory}\n              selectedCategory={selectedCategory}\n              isValidSession={isValidSession}\n            />\n          </div>\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: {\n                session_expired: true\n              }\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  };\n  \n  const mapStateToProps = (state) => {\n    return {\n      albums: state.albums,\n      artists: state.artists,\n      playlist: state.playlist\n    };\n  };\n  \n  export default connect(mapStateToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}